找出数量最大同时用量最小
分别对两个量排序 保存到2个表 对比2个表是否同时满足条件




location.reload();


插入排序
function insertionSort(array) {
  var len = array.length;
  for (var i = 0; i < len; i++) {
    var current = array[i];
    var j = i - 1;
    while (j >= 0 && array[j] > current) {
      array[j + 1] = array[j];
      j--;
    }
    array[j + 1] = current;
  }
  return array;
}


程序运行时间
console.time('test');
for (var i = 0; i < 1000000; i++) {
  // 在这里运行需要测量时间的程序代码
}
console.timeEnd('test');










在JavaScript中，当需要操作大量元素时，可以采用以下几种方法来提高性能：

使用querySelectorAll()代替getElementsByTagName()
getElementsByTagName()会从整个文档树中查找节点元素，而且是动态实时求值的，每次检索都需要浪费性能，所以避免使用此方法。相反，可以使用querySelectorAll()选择匹配特定选择器的元素，以减少元素集合的大小。

使用虚拟滚动技术
当页面上需要展示大量元素时，如列表、表格等，使用虚拟滚动技术能够有效地提高性能。虚拟滚动技术只在视口内渲染必要的元素，当用户滚动视图时，再动态加载更多的元素。

避免在布局和绘制期间触发回流
回流是导致性能下降的主要原因之一，可以避免回流的方法包括：

避免多次读取DOM元素的布局信息，使用变量保存信息
缓存DOM元素的样式信息
使用requestAnimationFrame()等工具，在下一个重绘周期中完成DOM操作
使用事件委托
使用事件委托技术，将事件处理程序绑定到父元素上，以代替为每个子元素都绑定事件处理程序。

分批次加载数据
在实现列表、表格等组件时，可以使用分批次加载数据的方式，即在页面渲染完成后，每次只加载一部分数据，并通过事件等方式触发后续数据加载。这种方式可以减轻浏览器的负担，并提高用户体验。

总之，在处理大量元素时，需要避免浪费性能和资源。以上提到的方法都是有效的优化方案，但具体实现应因情况而异。














// 选中指定元素中的文本
function selectText(element) {
  var range, selection;
  if (document.body.createTextRange) {
    range = document.body.createTextRange();
    range.moveToElementText(element);
    range.select();
  } else if (window.getSelection) {
    selection = window.getSelection();
    range = document.createRange();
    range.selectNodeContents(element);
    selection.removeAllRanges();
    selection.addRange(range);
  }
}

// 在页面加载完成后，将文本选择器添加到页面上
window.addEventListener('load', function() {
  var selector = document.createElement('div');
  selector.style.display = 'none';
  selector.style.position = 'absolute';
  selector.style.border = '1px dashed #000';
  selector.style.backgroundColor = '#eee';
  selector.style.opacity = '0.5';
  selector.style.zIndex = '9999';
  document.body.appendChild(selector);

  // 点击任意元素时，选择相应的文本
  document.addEventListener('click', function(event) {
    var target = event.target;
    if (target.nodeType === 3) { // 选中文本节点
      target = target.parentNode;
    }
    selectText(target);
    // 在选中的元素周围显示选中效果
    var rect = target.getBoundingClientRect();
    selector.style.top = rect.top + 'px';
    selector.style.left = rect.left + 'px';
    selector.style.width = rect.width + 'px';
    selector.style.height = rect.height + 'px';
    selector.style.display = 'block';
  }, false);
});


您可以使用 JavaScript 来将变量值显示在输入框中。假设您有一个输入框和一个变量 `myVariable`，则可以使用以下代码将该变量值显示在输入框中：

HTML 代码：

```html
<input type="text" id="myInput">
<button onclick="displayVariable()">显示变量</button>
```

JavaScript 代码：

```javascript
var myVariable = "Hello World!"; // 假设这是您的变量

function displayVariable() {
  var input = document.getElementById("myInput"); // 获取输入框元素
  input.value = myVariable; // 设置输入框的值为变量值
}
```

当用户点击“显示变量”按钮时，`displayVariable()` 函数会被调用，并将 `myVariable` 的值显示在输入框中。

如果您希望在页面加载时自动将变量值显示在输入框中，可以在 JavaScript 文件中添加以下代码：

```javascript
window.onload = function() {
  var input = document.getElementById("myInput"); // 获取输入框元素
  input.value = myVariable; // 设置输入框的值为变量值
}
```

该代码会在页面加载后自动执行，并将 `myVariable` 的值显示在输入框中。




要在web页面上创建一个圆角框，您可以使用CSS `border-radius` 属性来实现。该属性允许您将元素的边框角变为圆形。

以下是一个简单的HTML和CSS示例，演示如何创建圆角矩形：

```html
<div class="rounded-box">
  <p>这是一个圆角矩形！</p>
</div>
```

```css
.rounded-box {
  border: 2px solid #ccc;
  border-radius: 20px;
  padding: 10px;
}
```

在这个例子里，我们用 `<div>` 元素包裹了一段文本内容。样式定义了这个 `<div>` 元素带有薄的灰色实线边框，并且使用 `border-radius` 属性来把边角变成了圆形。

您可以根据需要修改此示例，以适应您的具体需求。例如，您可以更改使用的颜色、边框样式、填充等等。

同时，注意到 `border-radius` 是 CSS3 引入支持的属性。如果您需要支持更古老的浏览器版本，则需要提供备用方案，如使用图片代替纯 CSS 实现等。






要在网页中注入本地的CSS文件，可以通过以下几个步骤：

1. 在HTML文件中创建link元素，并将其href属性设置为指向本地CSS文件的路径。例如：`<link rel="stylesheet" type="text/css" href="/path/to/style.css">`
2. 将link元素放置在HTML文件的head标签内。
3. 保存并重新加载HTML文件，以便新的样式表能够生效。

需要注意的是，在将网站部署到服务器上时，需要确保CSS文件能够正确地被上传到服务器中，并且链接路径设置正确。






您可以使用以下方法在JavaScript中注入CSS文件：

1. 使用document.createElement方法创建一个link元素，将其类型设置为"text/css"，href属性设置为CSS文件的URL。

```
var cssId = 'myCss';  // 设置CSS ID
if (!document.getElementById(cssId)) {
    var head = document.getElementsByTagName('head')[0];
    var link = document.createElement('link');
    link.id = cssId;
    link.rel = 'stylesheet';
    link.type = 'text/css';
    link.href = 'https://example.com/path/to/your.css';
    head.appendChild(link);
}
```

2. 使用document.write方法直接把style标签插入到HTML中。

```
document.write('<style type="text/css">@import url("https://example.com/path/to/your.css");</style>');
```

这些代码都可以在页面加载时执行，或者根据事件触发需要动态添加CSS文件。




如果你需要查找多个匹配项，你可以使用一个循环来反复调用Window.find方法，直到找到所有的匹配项为止。在每次调用Window.find方法时，你需要向它传递两个参数：要查找的字符串和一些搜索选项。此外，你还需要指定`findNext`参数为`true`，以便让浏览器查找下一个匹配项。

下面是一个示例代码片段，给出如何使用Window.find方法来查找多个匹配项：

```
const searchValue = "example"; // 搜索文本
let matchCount = 0; // 匹配项计数
let range; // 当前匹配项范围

do {
  range = window.find(searchValue, false, false, true, false, true, false);
  if (range) {
    matchCount++; // 增加匹配项计数
    range.collapse(false); // 将光标移动到匹配项结束位置
  }
} while (range); // 反复循环直到找不到更多的匹配项

console.log(`Found ${matchCount} matches`);
```

在这个例子中，我们首先定义了要搜索的字符串和一个变量来记录找到的匹配数量。然后我们开始一个“do...while”循环，在循环体内调用Window.find方法来查找下一个匹配项。如果找到了当前或下一个匹配项，则会增加“matchCount”的值并将光标移动到该匹配项的结束位置。

最后，当不再找到匹配项时，循环将停止并输出找到的匹配数量。


要将注入的元素显示在最上方并将原有页面下移，您可以使用CSS中的position属性和z-index属性。

首先，将注入的元素的position属性设置为fixed，并设置top和left等属性来确定其位置。然后，使用z-index属性将其堆叠顺序设置为比页面中其他元素更高。最后，根据您需要的距离，将原有页面下移相应的距离。

以下是一个示例CSS代码：

```
#injected-element {
  position: fixed;
  top: 0;
  left: 0;
  z-index: 9999; /* 将其堆叠顺序设置为比页面中其他元素更高 */
}

body {
   margin-top: 100px; /* 将原有页面下移100px */
}
```

在上面的示例中，“#injected-element”是注入的元素的ID。通过将其position设置为fixed，并使用top和left等属性，可以让它相对于浏览器窗口显示在页面上方。然后，使用z-index属性将其堆叠顺序设置为比其他元素更高。

最后，在body样式中，将margin-top设置为所需距离（此处为100px），以便将整个网页下移。这样，您就可以通过同时使用position和z-index属性来使注入元素显示在最上方，并在该元素下方显示原有内容。

是的，您可以在HTML的`<div>`标签中使用`style`属性来直接定义背景颜色。以下是一个例子：

```
<div style="background-color: red;">
  这是一个带红色背景的div元素。
</div>
```

在上面的代码中，我们使用了`style`属性来定义了背景颜色为红色（使用CSS属性名`background-color`），所以这个`<div>`元素将会有红色背景。

该方法更加简单和便捷，但如果需要定义多个样式，最好还是把它们放入一个CSS文件里。




要在页面上方注入一个状态栏，您可以使用 JavaScript 创建元素并将其添加到页面顶部。以下是一些实现的示例代码：

```javascript
// 创建一个 header 元素用于放置状态栏内容
const header = document.createElement('header');
header.style.position = 'fixed'; // 设置为固定定位
header.style.top = '0'; // 设置在页面顶部
header.style.left = '0';
header.style.height = '50px'; // 状态栏高度
header.style.width = '100%'; // 宽度撑满整个页面
header.style.backgroundColor = '#333'; // 背景颜色

// 添加状态栏内容，这里我们添加一个简单的文本
const textNode = document.createTextNode('这是一个状态栏！');
header.appendChild(textNode);

// 将 header 元素添加到 body 元素中
const bodyEl = document.querySelector('body');
bodyEl.insertBefore(header, bodyEl.firstChild);
```

上述代码将创建一个 `header` 元素，设置其样式及内容，然后将其添加到 `body` 元素中。您可以按照需要修改样式和内容以适应您的要求。

希望这些信息能够帮到您！